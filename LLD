Factors in which the xpath should be written as broken-
1.When count of ( and ) brackets don't match
2.When count of [ and ] brackets don't match
3.When xpath starts from *
4.When count of double quotes don't match
5.When count of single quotes don't match
6.User regex to determine name of xpath to be in same pattern
7.When id,name,text,selector,classname contains the properties which are absent from xpath
8.When there is any space in the xpath written or in the object name
9. Double slashes check, if there are so many double slashes it means the xpath is absolute
10. single slashes check, if there are so many single slashes it means the xpath is absolute
11. Check if the xpath starts with slashes or not
12. Check if xpath only contains the numericals


conditions not handled-
1. //html/body/div[3]/div[2]/div/div[1]/div[3]/div[3]/div[2]/div/div[3]/div[1]/ul/li[1]/div[2]/div/div/a- Absolute xpath
2. htm/body/div[3]/div[2]/div/div[1]/div[3]/div[3]/div[2]/div/div[3]/div[1]/ul/li[1]/div[2]/div/div/a- broken xpath
3. Just a sample string- "hello this is a test"-- it is also a broken xpath


LLD
-----------------------------------------------------

def round_brackets_check(dataframe.series):
    return a boolean flag

def square_brackets_check(dataframe.series):
    return a boolean flag

def astriesk_check(dataframe.series):
    return a boolean flag

def double_quotes_check(dataframe.series):
    return a boolean flag

def single_quotes_check(dataframe.series):
    return a boolean flag

def regex_check_for_name(dataframe.series):
    return a boolean flag

def space_Check(dataframe.series):
    return a boolean flag


def master_Decider_method(round_brackets_flag,square_brackets_flag,asteriesk_check_flag,single_quotes_check_flag,double_quotes_check_flag
,regex_check_for_name_flag):
    broken=[round_brackets_flag,square_brackets_flag,single_quotes_check_flag,double_quotes_check_flag]
    if all(broken):
    print('xpath looks fine')
    else:
   print('xpath is broken')

   if slashes_count>4:
        message=

    if all the flags are True:
        return "xpath looks correct"

    else:
        return "xpath is broken"

def dataframe_modifier(dataframe):
    string message=master_Decider_method()
    if message ="Xpath is broken":
        dataframe['Auto review comment']="The xpath is broken"

    elif message="Xpath looks correct":
        dataframe['Auto review comment']="The xpath is good"


def file_reader(filename):
    Reads the file returns dataframe
    return dataframe

def create_review_column(dataframe):
    dataframe['Review']=''
    return updated_dataframe

def select_column_to_be_checked(dataframe,column name):
    check if requested column name is present in dataframe,if not return exception
    dataframe['column name']

def convert_dataframe_to_file(dataframe):
    converts the dataframe to xlsm format

---------------------Some important failure handling technique-------------------------------
As soon as input file is read, store it into the database. So that if any failure happens it will return the original file to user.
Also store the logs into database as well.

------------- Some data preprocessing steps before performing operations on the file---------------------
1. check if some rows have only object name and empty entire property
2. If entire file is empty or truncated then show the message on web, file is empty
3. Check the format of file, if file format(column names) are incorrect then don't process it and right away show incorrect file format.

-------------------Unit test cases----------------------------------------------------------------
1. Create some unit test cases for each conditions which will execute all the method and check the accuracy


------------------------- Failure priority--------------------------------------------------------------------
1. Show the exact reason for the failure, eg- xpath is broken as quotes/brackets is missing or not matching
   eg 2- Xpath is not robust, please avoid using //*
2. Prioritize the message to be written on sheet, as there can be times when multiple failure happens


One master function can store all the true and false values from methods and then pass it to decider method,
decider method will prioritize them,
if brackets or quotes false:
    print('Xpath is broken because of brackets or quotes missing')
if asterisk false:
    print('Xpath is not robust may lead to discrepancies ')

----------------------------After operation------------------------------------------------------------------
Once all the xpaths are checked, then dataframe with updated column will be created into two files, one is xlsm and another is csv.
The csv file will be used to analyze the report of the xpath performances. It can show that out of 100 xpaths 20 were found broken,
40 were found to be absolute and 20 found to be less robust. We can also use some graphs here to perform same.


-------------------------------Highlighting---------------------------------------------------------------------
Use color highlighting methods to highlight the output excel file. for eg- Red for broken xpath, yellow for suggestions, and green
for pass, blue for no xpaths.